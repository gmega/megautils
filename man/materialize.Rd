% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db.R
\name{materialize}
\alias{materialize}
\title{Easily import and cache remote database tables as tibbles.}
\usage{
materialize(reference, ...)
}
\description{
Utility functions for reading remote database tables (using SQL) into 
tibbles and caching them into disk for future use.
}
\details{
\describe{
   \item{`db_table()`}{lazy reference to a database table which can 
   be read into memory as a tibble and cached into disk.}

\item{`query_table()`}{lazy reference to a query result which can
   be read into memory as a tibble and cached into disk.}
   
   \item{`parametric_table()`}{same as `query_table()`, but taking a
   parametric query and a list of named query parameters.}
   
   \item{`cached_table()`}{lazy reference to a table which has been
   previously cached. This exists mainly so that cached tables can 
   be read without setting up a database connection, which is required
   by all other reference types.}
   
   \item{`materialize()`}{materializes a lazy reference into an actual
   tibble by accessing the remote database. This function never reads
   or writes to the local cache.}
   
   \item{`size()`}{returns the size, in megabytes, of a lazy table reference 
   without materializing it. This may be useful for probing the size of a 
   database table before deciding to download it.}
   
   \item{`import()`}{materializes a lazy reference into an actual tibble
   by reading from the local cache, or calling `materialize()` and then 
   caching results if nothing is cached. The resulting tible will be 
   automatically bound to a variable with the table's `name` in the parent
   environment.}
   
   \item{`import_all()`}{utility function. Equivalent to looping through a
   set of lazy references and calling import in each.}
   
   \item{`cached_tables()`}{utility function for creating several cached
   table references from their names alone.}
}
}
